buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.0.0.M11"
  }
}

apply plugin: 'kotlin-kapt'
apply from: rootProject.file('gradle/generated-kotlin-sources.gradle')
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.gitlab.arturbosch.detekt'

android {
  compileSdkVersion compileVersion
  buildToolsVersion build_tools_version

  defaultConfig {
    applicationId appId
    minSdkVersion minSdk
    targetSdkVersion targetSdk
    versionCode version_code
    versionName version_name
    testInstrumentationRunner testInstrumentationRunner
    multiDexEnabled true

    buildConfigField "String", "NEWS_API_KEY", newsApiKey
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    abortOnError false
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

detekt {
  version = "1.0.0.M11"
  input = "$project.projectDir.absolutePath"
  config = "$project.rootDir/detekt.yml"
  filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
  output = "$project.projectDir.absolutePath/reports/"
  report = "$project.projectDir.absolutePath/reports/"
}

dependencies {
  implementation "androidx.appcompat:appcompat:$appCompatVersion"
  implementation "androidx.cardview:cardview:$cardViewVersion"
  implementation "com.google.android.material:material:$materialVersion"
  implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
  implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
  implementation "com.squareup.picasso:picasso:$picassoVersion"
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
  implementation "com.squareup.moshi:moshi:$moshiVersion"
  implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"

  kapt "io.arrow-kt:arrow-meta:$arrowVersion"
  implementation "io.arrow-kt:arrow-core:$arrowVersion"
  implementation "io.arrow-kt:arrow-fx:$arrowVersion"

  testImplementation "me.jorgecastillo:hiroaki-core:$hiroakiVersion"
  testImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
  testImplementation "junit:junit:$junitVersion"
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineTestVersion"
  testImplementation "io.arrow-kt:arrow-core:$arrowVersion"
  testImplementation "io.arrow-kt:arrow-fx:$arrowVersion"

  androidTestImplementation "androidx.test:core:$androidTestCoreVersion"
  androidTestImplementation "androidx.test:core-ktx:$androidTestCoreVersion"
  androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
  androidTestImplementation "androidx.test.ext:junit-ktx:$androidxJunitVersion"
  androidTestImplementation "androidx.test:runner:$androidxTestRunnerVersion"
  androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCoreVersion"
  androidTestImplementation "me.jorgecastillo:hiroaki-core:$hiroakiVersion"
  androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
  androidTestImplementation "io.arrow-kt:arrow-core:$arrowVersion"
  androidTestImplementation "io.arrow-kt:arrow-fx:$arrowVersion"
}
